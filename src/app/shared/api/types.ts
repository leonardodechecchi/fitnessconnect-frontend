/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/auth/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Check Auth
         * @description Check Auth
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            timestamp: string;
                            data: {
                                isAuthenticated: boolean;
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Me
         * @description Get Me
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            timestamp: string;
                            data: components["schemas"]["User"];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Login
         * @description Login
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** Format: email */
                        email: string;
                        password: string;
                    };
                };
            };
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            timestamp: string;
                            data: {
                                action: string | string[];
                                subject: string | string[];
                                fields?: string[];
                                conditions?: {
                                    [key: string]: unknown;
                                };
                                inverted?: boolean;
                                reason?: string;
                            }[];
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Register
         * @description Register
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        firstName: string;
                        lastName: string;
                        /** Format: email */
                        email: string;
                        password: string;
                        timezone: string;
                    };
                };
            };
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            timestamp: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Logout
         * @description Logout
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            timestamp: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Refresh
         * @description Refresh
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            timestamp: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/oauth/google": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Google Login
         * @description Google Login
         */
        get: {
            parameters: {
                query?: {
                    redirectUrl?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            timestamp: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/oauth/google/callback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Google Login Callback
         * @description Google Login Callback
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            timestamp: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/oauth/facebook": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Facebook Login
         * @description Facebook Login
         */
        get: {
            parameters: {
                query?: {
                    redirectUrl?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            timestamp: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/oauth/facebook/callback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Facebook Login Callback
         * @description Facebook Login Callback
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            timestamp: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/specialties/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Specialties
         * @description Get Specialties
         */
        get: {
            parameters: {
                query: {
                    page: string;
                    limit: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            timestamp: string;
                            pagination: {
                                page: number;
                                limit: number;
                                totalItems: number;
                                totalPages: number;
                            };
                            data: {
                                id: string;
                                name: string;
                            }[];
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * Create Specialty
         * @description Create Specialty
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        name: string;
                    };
                };
            };
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            timestamp: string;
                            data: {
                                id: string;
                                name: string;
                            };
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/specialties/{specialtyId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete Specialty
         * @description Delete Specialty
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    specialtyId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            timestamp: string;
                            data: {
                                id: string;
                                name: string;
                            };
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/trainers/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Trainers
         * @description Get Trainers
         */
        get: {
            parameters: {
                query: {
                    page: string;
                    limit: string;
                    name?: string;
                    specialties?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            timestamp: string;
                            pagination: {
                                page: number;
                                limit: number;
                                totalItems: number;
                                totalPages: number;
                            };
                            data: (components["schemas"]["Trainer"] & {
                                specialties: {
                                    id: string;
                                    name: string;
                                }[];
                            })[];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/trainers/{trainerId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Trainer By Id
         * @description Get Trainer By Id
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    trainerId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            timestamp: string;
                            data: components["schemas"]["Trainer"] & {
                                specialties: {
                                    id: string;
                                    name: string;
                                }[];
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/trainers/{trainerId}/slots": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Trainer Slots
         * @description Get Trainer Slots
         */
        get: {
            parameters: {
                query: {
                    date: string;
                };
                header?: never;
                path: {
                    trainerId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            timestamp: string;
                            data: {
                                start: string;
                                end: string;
                            }[];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/trainers/{trainerId}/availabilities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Trainer Availabilities
         * @description Get Trainer Availabilities
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    trainerId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            timestamp: string;
                            data: {
                                id: string;
                                dayOfWeek: number;
                                startTime: string;
                                endTime: string;
                            }[];
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * Create Trainer Availability
         * @description Create Trainer Availability
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    trainerId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        dayOfWeek: number;
                        startTime: string;
                        endTime: string;
                    };
                };
            };
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            timestamp: string;
                            data: {
                                id: string;
                                dayOfWeek: number;
                                startTime: string;
                                endTime: string;
                            };
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/trainers/{trainerId}/exceptions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Trainer Exceptions
         * @description Get Trainer Exceptions
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    trainerId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            timestamp: string;
                            data: {
                                id: string;
                                startDatetime: string;
                                endDatetime: string;
                                isAvailable: boolean;
                                reason?: string;
                                trainer?: unknown;
                            }[];
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * Create Trainer Exception
         * @description Create Trainer Exception
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    trainerId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** Format: date-time */
                        startDatetime: string;
                        /** Format: date-time */
                        endDatetime: string;
                        isAvailable: boolean;
                        reason?: string;
                    };
                };
            };
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            timestamp: string;
                            data: {
                                id: string;
                                startDatetime: string;
                                endDatetime: string;
                                isAvailable: boolean;
                                reason?: string;
                                trainer?: unknown;
                            };
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Users
         * @description Get Users
         */
        get: {
            parameters: {
                query: {
                    page: string;
                    limit: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            timestamp: string;
                            pagination: {
                                page: number;
                                limit: number;
                                totalItems: number;
                                totalPages: number;
                            };
                            data: components["schemas"]["User"][];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User By Id
         * @description Get User By Id
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            timestamp: string;
                            data: components["schemas"]["User"];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * Delete User By Id
         * @description Delete User By Id
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            timestamp: string;
                            data: components["schemas"]["User"];
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /**
         * Patch User By Id
         * @description Patch User By Id
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @enum {string} */
                        status?: "Active" | "Restricted" | "Banned";
                        timezone?: string;
                    };
                };
            };
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            timestamp: string;
                            data: components["schemas"]["User"];
                        };
                    };
                };
            };
        };
        trace?: never;
    };
    "/wishlists/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Wishlists
         * @description Get Wishlists
         */
        get: {
            parameters: {
                query: {
                    page: string;
                    limit: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            timestamp: string;
                            pagination: {
                                page: number;
                                limit: number;
                                totalItems: number;
                                totalPages: number;
                            };
                            data: components["schemas"]["Wishlist"][];
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * Create Wishlist
         * @description Create Wishlist
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        name: string;
                        /** Format: uuid */
                        trainerId: string;
                    };
                };
            };
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            timestamp: string;
                            data: components["schemas"]["Wishlist"];
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/wishlists/{wishlistId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Wishlist By Id
         * @description Get Wishlist By Id
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    wishlistId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            timestamp: string;
                            data: components["schemas"]["Wishlist"];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * Get Wishlist By Id
         * @description Get Wishlist By Id
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    wishlistId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            timestamp: string;
                            data: components["schemas"]["Wishlist"];
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /**
         * Get Wishlist By Id
         * @description Get Wishlist By Id
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    wishlistId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        name?: string;
                    };
                };
            };
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            timestamp: string;
                            data: components["schemas"]["Wishlist"];
                        };
                    };
                };
            };
        };
        trace?: never;
    };
    "/wishlists/{wishlistId}/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Wishlist Items
         * @description Get Wishlist Items
         */
        get: {
            parameters: {
                query: {
                    page: string;
                    limit: string;
                    sortBy?: "createdAt";
                    orderBy?: "ASC" | "ASC NULLS LAST" | "ASC NULLS FIRST" | "DESC" | "DESC NULLS LAST" | "DESC NULLS FIRST" | "asc" | "asc nulls last" | "asc nulls first" | "desc" | "desc nulls last" | "desc nulls first";
                };
                header?: never;
                path: {
                    wishlistId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            timestamp: string;
                            pagination: {
                                page: number;
                                limit: number;
                                totalItems: number;
                                totalPages: number;
                            };
                            data: (components["schemas"]["Item"] & {
                                trainer: components["schemas"]["Trainer"];
                            })[];
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * Create Wishlist Item
         * @description Create Wishlist Item
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    wishlistId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** Format: uuid */
                        trainerId: string;
                    };
                };
            };
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            timestamp: string;
                            data: components["schemas"]["Item"];
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/wishlists/{wishlistId}/items/{itemId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Wishlist Item By Id
         * @description Get Wishlist Item By Id
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    wishlistId: string;
                    itemId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            timestamp: string;
                            data: components["schemas"]["Item"];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * Delete Wishlist Item By Id
         * @description Delete Wishlist Item By Id
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    wishlistId: string;
                    itemId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            timestamp: string;
                            data: components["schemas"]["Item"];
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        "Login Input": {
            /** Format: email */
            email: string;
            password: string;
        };
        "Register Input": {
            firstName: string;
            lastName: string;
            /** Format: email */
            email: string;
            password: string;
            timezone: string;
        };
        "Create Specialty Input": {
            name: string;
        };
        "Create Trainer Availability Input": {
            dayOfWeek: number;
            startTime: string;
            endTime: string;
        };
        "Create Trainer Exception Input": {
            /** Format: date-time */
            startDatetime: string;
            /** Format: date-time */
            endDatetime: string;
            isAvailable: boolean;
            reason?: string;
        };
        "Patch User By Id Input": {
            /** @enum {string} */
            status?: "Active" | "Restricted" | "Banned";
            timezone?: string;
        };
        "Create Wishlist Input": {
            name: string;
            /** Format: uuid */
            trainerId: string;
        };
        "Get Wishlist By Id Input": {
            name?: string;
        };
        "Create Wishlist Item Input": {
            /** Format: uuid */
            trainerId: string;
        };
        User: {
            id: string;
            firstName: string;
            lastName: string;
            fullName: string;
            email: string;
            profilePictureUrl?: string;
            timezone: string;
        };
        Trainer: {
            user: components["schemas"]["User"];
            bio?: string;
            sessionDuration: number;
        };
        Wishlist: {
            id: string;
            name: string;
            owner: number;
            createdAt: string;
        };
        Item: {
            id: string;
            trainer?: unknown;
            wishlist?: unknown;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
